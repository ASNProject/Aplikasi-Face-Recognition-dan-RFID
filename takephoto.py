# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'takephotoui.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.



from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox, QWidget
from PyQt5 import QtSql
import sqlite3
import cv2
import numpy as np
from PIL import Image
import os


faceDetected = cv2.CascadeClassifier('haarcascade_frontalface_default.xml');


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(368, 265)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(20, 10, 151, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(20, 50, 20, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(20, 80, 51, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(80, 50, 261, 20))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(80, 80, 261, 20))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(10, 150, 341, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.simpandata)
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(10, 200, 341, 41))
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.trainingdata)
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(20, 110, 51, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3.setGeometry(QtCore.QRect(80, 110, 261, 20))
        self.lineEdit_3.setInputMask("")
        self.lineEdit_3.setObjectName("lineEdit_3")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def simpandata(self):
        cam = cv2.VideoCapture(0);
        def insertOrUpdate(Id, Name, Email):
            conn = sqlite3.connect("FacaBase.db")
            cmd = "SELECT * FROM People WHERE ID="+str(Id)
            cursor = conn.execute(cmd)
            isRecordExist=0
            for row in cursor:
                isRecordExist=1
            if(isRecordExist==1):
                cmd = "UPDATE People SET Name="+str(Name)+"WHERE ID="+str(Id)
                cmd = "UPDATE People SET Email="+str(Email)+"WHERE ID="+str(Id)
            else:
                cmd="INSERT INTO People(ID,Name,Email) Values("+str(Id)+","+str(Name)+","+str(Email)+")"
            conn.execute(cmd)
            conn.commit()
            conn.close()
        def makeData(Id):
            conn = sqlite3.connect("database/"+Id+".db")
            conn.close()
            print("Sukses Create Data")
        def makeTabel(Id):
            conn = sqlite3.connect('database/'+Id+'.db')
            cursor = conn.cursor()
            sql = '''CREATE TABLE BUKU(No INT, Kode INT, Buku CHAR(20), Pinjam INT,Kembali INT)'''
            cursor.execute(sql)
            conn.commit()
            conn.close()
            
        id = self.lineEdit.text()
        name = "'"+self.lineEdit_2.text()+"'"
        email = "'"+self.lineEdit_3.text()+"'"
        
        insertOrUpdate(id, name, email)
        makeData(id)
        makeTabel(id)
        sampleNum=0;
        while(True):
            ret, img = cam.read();
            gray=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
            faces=faceDetected.detectMultiScale(gray,1.3,5);
            for(x,y,w,h) in faces:
                sampleNum=sampleNum+1;
                cv2.imwrite("dataset/User."+self.lineEdit.text()+"."+str(sampleNum)+".jpg",gray[y:y+h,x:x+w])
                cv2.rectangle(img,(w,y),(x+w,y+h),(0,0,255),2)
                cv2.waitKey(100);
            cv2.imshow("Wajah",img);
            cv2.waitKey(1);
            if (sampleNum>20):
                break;
        msgBox = QMessageBox()
        msgBox.setWindowTitle("Take Photo")
        msgBox.setText("SELESAI !!")
        x = msgBox.exec_()
        self.lineEdit.setText(" ")
        self.lineEdit_2.setText(" ")
        self.lineEdit_3.setText(" ")
        cam.release()
        cv2.destroyAllWindows()

    def trainingdata(self):
        recognizer = cv2.face.LBPHFaceRecognizer_create();
        path='dataset'
        def getImageWithID(path):
            imagePaths=[os.path.join(path,f) for f in os.listdir(path)]
            faces=[]
            IDs=[]
            for imagePath in imagePaths:
                faceImg = Image.open(imagePath).convert('L');
                faceNp = np.array(faceImg,'uint8')
                ID = int(os.path.split(imagePath)[-1].split('.')[1])
                faces.append(faceNp)
                IDs.append(ID)
                cv2.imshow("Training",faceNp)
                cv2.waitKey(10)
            return np.array(IDs), faces
        
        Ids, faces = getImageWithID(path)
        recognizer.train(faces,(Ids))
        recognizer.save('recognizer/trainingData.yml')
        cv2.destroyAllWindows()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Tambah Data"))
        self.label.setText(_translate("MainWindow", "Masukkan data:"))
        self.label_2.setText(_translate("MainWindow", "ID"))
        self.label_3.setText(_translate("MainWindow", "Nama"))
        self.pushButton.setText(_translate("MainWindow", "MULAI TAMBAH DATA"))
        self.pushButton_2.setText(_translate("MainWindow", "TRAINING DATA"))
        self.label_6.setText(_translate("MainWindow", "Email"))
        
if __name__ == '__main__':
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    
    sys.exit(app.exec_())
    
